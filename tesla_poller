#!/usr/bin/python
import teslajson
import time
import json
import traceback
import urllib2
import argparse
from threading import Thread
import sys
import subprocess

args = None

# to_sleep is the amount of time it takes for the vehicle to go back to sleep
intervals = { "inactive": 60, "to_sleep": 665, "active": 60, "charging": 90, "running": 30, "Unknown": 15, "sleep_poll": 10000, "running_poll": 300, "recent": 300 }


nexthour = 0
def output_maintenance():
    global nexthour, W
    if not args.outdir:
        return
    cur = time.time()
    if cur < nexthour:
        return
    if W is not None:
        W.close()
    nexthour = (int(cur / 3600)+1) * 3600
    fname = time.strftime("%Y-%m-%d.json", time.gmtime(cur))
    pname = "%s/%s"%(args.outdir, fname)
    W = open(pname, "a", 0)
    subprocess.call(["ln", "-sf", fname, "%s/cur.json"%args.outdir])

def refresh_vehicles(args):
    """Connect to service and get list of vehicles"""

    c = teslajson.Connection(access_token=args.token)
    if args.verbose:
        W.write("# Vehicles: %s\n"%str(c.vehicles))
    return c


def monitor_vehicle(vehicle, args):
    """Monitor a vehicle, forever, printing json about current status"""

    state = "Unknown" if not args.assume_inactive else "inactive"
    backoff = 1
    last_poll = 0
    last_active = 0

    output_maintenance()

    # Loop to handle exceptions, with bounded expoential backoff to prevent Tesla from getting overly mad if we are polling too often
    while True:
        try:
            # Loop to allow the vehicle to sleep
            while True:
                wake_tries = 0
                while wake_tries < 100000:
                    output_maintenance()

                    vdata = vehicle.data_request(None)
                    vdata['retrevial_time'] = int(time.time())

                    W.write(json.dumps(vdata)+"\n")

                    # See whether it is awake or asleep
                    if args.verbose:
                        W.write("# STATE: %s carstate %s at %d\n"%(state, vdata['state'],time.time()))

                    # If awake (not asleep), figure out what is going on
                    if vdata["state"] not in ("asleep","offline","inactive"):
                        break

                    # If asleep and we know what is going on, and it isn't time for a double-check, let it sleep
                    if state == "inactive" and time.time() - last_poll < intervals['sleep_poll']:
                        time.sleep(intervals[state])
                        continue

                    # Otherwise, try to make it up
                    wake_tries += 1
                    if args.verbose:
                        W.write("# Waking... (%d times so far) at %d\n"%(wake_tries,time.time()))

                    # Pretty common to time out here, so let it
                    try:
                        vehicle.wake_up()
                    except urllib2.HTTPError:
                        W.write("# Timed out\n")
                    # Rate limitation on wake-ups
                    duration = 2.5 * wake_tries
                    if duration > 3600:
                        duration = 3600
                    time.sleep(duration)
                else:
                    W.write("Could not wake %s\n"%vehicle['display_name'])

                state = "Unknown"
                backoff = 0     # Reset backoff interval now that we have successful comms
                last_active = 0
                time.sleep(5)

                # The vehicle is awake, monitor it until it is boring for a while
                while not (state == "inactive" and time.time() - last_active > intervals["recent"]):

                    output_maintenance()

                    # Figure out what type of monitoring we want to do based on current state
                    want = None
                    if time.time() - last_poll >= intervals['sleep_poll']:
                        state = "Unknown"
                    if state == "running":
                        if time.time() - last_poll >= intervals['running_poll']:
                            want = "Unknown"
                        else:
                            want = "drive_state"
                    elif state == "charging":
                        want = "charge_state"
                    else:
                        if args.verbose:
                            W.write("# Getting all data due to state %s at %d\n"%(state,time.time()))

                        # We want to know everything
                        curdata = vehicle.data_all()
                        last_poll = time.time()
                        if curdata['drive_state']['shift_state'] is not None:
                            state = "running"
                            last_active = last_poll
                        elif curdata['climate_state']['is_climate_on']:
                            state = "active"
                            last_active = last_poll
                        elif curdata['charge_state']['charger_power']:
                            state = "charging"
                            last_active = last_poll
                        else:
                            state = "inactive"

                    if want:
                        if args.verbose:
                            W.write("# Getting %s data due to state %s at %d\n"%(want,state,time.time()))
                        # We only want to know some things
                        curdata = dict(vdata)
                        curdata[want] = vehicle.data_request(want)

                        # If we transitioned from doing X to !X, get full information next cycle
                        if state == "running" and curdata['drive_state']['shift_state'] is None:
                            state = "Unknown"
                        elif state == "charging" and not curdata['charge_state']['charger_power']:
                            state = "Unknown"

                    curdata['retrevial_time'] = int(time.time())
                    W.write(json.dumps(curdata))

                    if args.verbose:
                        W.write("# STATE: %s sleep %s at %d %d %d\n"%(state, intervals[state], time.time(), last_poll, last_active))
                    time.sleep(intervals[state])

                if state == "inactive":
                    if args.verbose:
                        W.write("# STATE: ready to sleep, sleep %d at %d\n"%(intervals["to_sleep"], time.time()))
                    time.sleep(intervals["to_sleep"])

        except Exception as e:
            W.write("# Exception: %s\n"%str(e))
            backoff += 1

        if backoff > 3:
            backoff = 3
        intrvl = 6 * 10**backoff
        W.write("# Disaster sleep for %d\n"%intrvl)
        time.sleep(intrvl)


parser = argparse.ArgumentParser()
parser.add_argument('--verbose', action='count', help='Increasing levels of verbosity')
parser.add_argument('--intervals',action='append',type=lambda x: x.split('='), help="Set important intervals name=secs for names in inactive,active,charging,running,Unknown,sleep_poll,running_poll,recent")
parser.add_argument('--token', help='Access token for tesla service')
parser.add_argument('--assume_inactive', action='store_true', help='Access token for tesla service')
parser.add_argument('--outdir', default=None, help='Directory to output log files')
args = parser.parse_args()

W = None if args.outdir else sys.stdout

if not args.token:
    print('''Must supply --token: Get access_token via:\ncurl -X POST -H "Cache-Control: no-cache" -H "Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW" -F "grant_type=password" -F "client_id=81527cff06843c8634fdc09e8ac0abefb46ac849f38fe1e431c2ef2106796384" -F "client_secret=c7257eb71a564034f9419ee651c7d0e5f7aa6bfbd18bafb5c5c033b093bb2fa3" -F "email=YOUR-TESLA-LOGIN-EMAIL@SOMEWHERE.COM" -F "password=YOUR-TESLA-ACCOUNT-PASSWORD" "https://owner-api.teslamotors.com/oauth/token''')
    sys.exit(1)

if args.intervals:
    intervals.update(args.intervals)

c = refresh_vehicles(args)

if len(c.vehicles) < 1:
    raise Exception("No vehicles to monitor")

if len(c.vehicles) == 1:
    monitor_vehicle(c.vehicles[0], args)
else:
    for vehicle in c.vehicles:
        Thread(target=monitor_vehicle, args=(vehicle,args)).start()
